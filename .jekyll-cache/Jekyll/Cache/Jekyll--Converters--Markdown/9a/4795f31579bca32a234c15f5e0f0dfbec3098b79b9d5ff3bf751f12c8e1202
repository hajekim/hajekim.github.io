I"
Y<h3 id="습득-가능-스킬">습득 가능 스킬</h3>

<ul>
  <li>최신 버전 &amp; 특정 버전 <code class="language-plaintext highlighter-rouge">Kubernetes 설치</code>할 수 있다.</li>
  <li>마스터 &amp; 워커 노드를 이용하여 <code class="language-plaintext highlighter-rouge">Kubernetes 클러스터 구성</code> 할 수 있다.</li>
</ul>

<h3 id="작성-환경">작성 환경</h3>

<ul>
  <li>MacBook Pro 2019, 13-inch</li>
  <li>macOS 10.15.7</li>
</ul>

<h3 id="준비물">준비물</h3>

<ul>
  <li>Virtual Machine 2 node (본 문서에서는 Oracle Cloud VM 사용)</li>
  <li>CentOS 7</li>
</ul>

<hr />

<h1 id="os-설정-및-패키지-설치">OS 설정 및 패키지 설치</h1>

<p>Kubernetes 설치를 위해 CentOS와 SELinux 등 필요한 작업을 진행하도록 합니다.
이 작업은 마스터 노드, 워커 노드 공통 작업입니다.</p>

<h2 id="yum-업데이트">Yum 업데이트</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum update <span class="nt">-y</span>
</code></pre></div></div>

<p>먼저 시스템을 업데이트하고 Docker, Kubernetes 순서로 설치합니다.</p>

<h2 id="docker-설치">Docker 설치</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> docker
</code></pre></div></div>

<p>도커를 설치하였으니 활성화하고 실행해봅시다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>docker <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>systemctl start docker
</code></pre></div></div>

<p>도커 버전을 확인해볼까요?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker version
</code></pre></div></div>

<h2 id="kubernetes-설치">Kubernetes 설치</h2>

<p>Kubernetes 최신 패키지를 사용하려면 Yum Repository를 구성해야 합니다. Kubernetes Yum Repo를 구성하기 위한 설정 파일을 작성합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>bash <span class="nt">-c</span> <span class="s1">'cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
EOF'</span>
</code></pre></div></div>

<p>통신 문제를 방지하기 위해 SELinux를 비활성화합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>setenforce 0
<span class="nb">sudo sed</span> <span class="nt">-i</span> <span class="s1">'s/^SELINUX=enforcing$/SELINUX=permissive/'</span> /etc/selinux/config
</code></pre></div></div>

<p>1.15 버전을 설치하기 위해 아래의 명령어를 입력합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1.15 특정 버전을 설치할 경우</span>
<span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> kubeadm-1.15.5-0.x86_64 kubectl-1.15.5-0.x86_64 kubelet-1.15.5-0.x86_64 <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes 
</code></pre></div></div>

<p>만약 최신 버전을 설치하기 위해서는 아래의 명령어를 입력합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 최신 버전을 설치할 경우</span>
<span class="nb">sudo </span>yum <span class="nb">install</span> <span class="nt">-y</span> kubelet kubeadm kubectl <span class="nt">--disableexcludes</span><span class="o">=</span>kubernetes
</code></pre></div></div>

<p>설치가 완료되면 kubelet 서비스를 활성화 합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>kubelet <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>systemctl start kubelet
</code></pre></div></div>

<h2 id="iptables-설정">IPTables 설정</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>bash <span class="nt">-c</span> <span class="s1">'cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF'</span>
</code></pre></div></div>

<p>위에서 생성한 설정 파일을 적용 해보자</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>sysctl <span class="nt">--system</span>
</code></pre></div></div>

<p>br_netfilter 모듈 로드하기</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>lsmod | <span class="nb">grep </span>br_netfilter
</code></pre></div></div>

<h1 id="마스터-노드-설정">마스터 노드 설정</h1>

<p>아래의 포트를 방화벽에서 오픈하도록 설정합니다.</p>

<ul>
  <li>6443</li>
  <li>10250</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>6443/tcp <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>firewall-cmd <span class="nt">--permanent</span> <span class="nt">--add-port</span><span class="o">=</span>10250/tcp <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>firewall-cmd <span class="nt">--reload</span>
</code></pre></div></div>

<blockquote>
  <p>** 참고 *
포트 열지 않으면 Kubernetes 초기화 시 아래 메시지가 표시됩니다.
[WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not function correctly
error execution phase preflight: [preflight] Some fatal errors occurred:*</p>
</blockquote>

<p>필수 패키지 및 구성 설치가 완료되었습니다!
이제 Kubernetes 초기화하며 사용 할 모든 이미지를 가져와 봅시다. kubeadm이 초기화 중에 자동으로 가져옵니다. 하지만 먼저 이미지를 가져 오는 것이 좋습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm config images pull
</code></pre></div></div>

<p>모든 이미지를 가져온 후에 클러스터 설정합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm init <span class="nt">--pod-network-cidr</span><span class="o">=</span>10.244.0.0/16
</code></pre></div></div>

<p>진행이 잘되면 다행이지만 혹시나 아래와 같이 에러메시지가 났다면, Swap 설정을 꺼줍니다. Oracle Cloud에서는 Swap 에러가 발생하네요.</p>

<blockquote>
  <p>[preflight] If you know what you are doing, you can make a check non-fatal with <code class="language-plaintext highlighter-rouge">-ignore-preflight-errors=...</code>*</p>
</blockquote>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>blkid
<span class="nb">sudo </span>swapoff /dev/mapper/centos-swap
<span class="nb">sudo </span>swapoff <span class="nt">-a</span>
</code></pre></div></div>

<p>영구적으로 Swap 설정을 끄기 위해서는 아래 설정 파일에서 Swap 설정을 주석 처리합니다.
주석은 #을 이용합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/fstab
</code></pre></div></div>

<p>Kubernetes 클러스터를 성공적으로 설정한 후에 아래의 출력과 유사해야 합니다. 마스터 노드와 워커 노드를 클러스터링하기 위해서는 토큰값을 포함한 조인 명령어를 따로 적어두도록 합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I1009 13:21:48.839304   12082 version.go:248] remote version is much newer: v1.19.2<span class="p">;</span> falling back to: stable-1.15
<span class="o">[</span>init] Using Kubernetes version: v1.15.12
<span class="o">[</span>preflight] Running pre-flight checks
	<span class="o">[</span>WARNING Firewalld]: firewalld is active, please ensure ports <span class="o">[</span>6443 10250] are open or your cluster may not <span class="k">function </span>correctly
<span class="o">[</span>preflight] Pulling images required <span class="k">for </span>setting up a Kubernetes cluster
<span class="o">[</span>preflight] This might take a minute or two, depending on the speed of your internet connection
<span class="o">[</span>preflight] You can also perform this action <span class="k">in </span>beforehand using <span class="s1">'kubeadm config images pull'</span>
<span class="o">[</span>kubelet-start] Writing kubelet environment file with flags to file <span class="s2">"/var/lib/kubelet/kubeadm-flags.env"</span>
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>kubelet-start] Activating the kubelet service
<span class="o">[</span>certs] Using certificateDir folder <span class="s2">"/etc/kubernetes/pki"</span>
<span class="o">[</span>certs] Generating <span class="s2">"ca"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"apiserver"</span> certificate and key
<span class="o">[</span>certs] apiserver serving cert is signed <span class="k">for </span>DNS names <span class="o">[</span>kube01-717648 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs <span class="o">[</span>10.96.0.1 10.0.0.39]
<span class="o">[</span>certs] Generating <span class="s2">"apiserver-kubelet-client"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"front-proxy-ca"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"front-proxy-client"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"etcd/ca"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"etcd/peer"</span> certificate and key
<span class="o">[</span>certs] etcd/peer serving cert is signed <span class="k">for </span>DNS names <span class="o">[</span>kube01-717648 localhost] and IPs <span class="o">[</span>10.0.0.39 127.0.0.1 ::1]
<span class="o">[</span>certs] Generating <span class="s2">"apiserver-etcd-client"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"etcd/server"</span> certificate and key
<span class="o">[</span>certs] etcd/server serving cert is signed <span class="k">for </span>DNS names <span class="o">[</span>kube01-717648 localhost] and IPs <span class="o">[</span>10.0.0.39 127.0.0.1 ::1]
<span class="o">[</span>certs] Generating <span class="s2">"etcd/healthcheck-client"</span> certificate and key
<span class="o">[</span>certs] Generating <span class="s2">"sa"</span> key and public key
<span class="o">[</span>kubeconfig] Using kubeconfig folder <span class="s2">"/etc/kubernetes"</span>
<span class="o">[</span>kubeconfig] Writing <span class="s2">"admin.conf"</span> kubeconfig file
<span class="o">[</span>kubeconfig] Writing <span class="s2">"kubelet.conf"</span> kubeconfig file
<span class="o">[</span>kubeconfig] Writing <span class="s2">"controller-manager.conf"</span> kubeconfig file
<span class="o">[</span>kubeconfig] Writing <span class="s2">"scheduler.conf"</span> kubeconfig file
<span class="o">[</span>control-plane] Using manifest folder <span class="s2">"/etc/kubernetes/manifests"</span>
<span class="o">[</span>control-plane] Creating static Pod manifest <span class="k">for</span> <span class="s2">"kube-apiserver"</span>
<span class="o">[</span>control-plane] Creating static Pod manifest <span class="k">for</span> <span class="s2">"kube-controller-manager"</span>
<span class="o">[</span>control-plane] Creating static Pod manifest <span class="k">for</span> <span class="s2">"kube-scheduler"</span>
<span class="o">[</span>etcd] Creating static Pod manifest <span class="k">for </span><span class="nb">local </span>etcd <span class="k">in</span> <span class="s2">"/etc/kubernetes/manifests"</span>
<span class="o">[</span>wait-control-plane] Waiting <span class="k">for </span>the kubelet to boot up the control plane as static Pods from directory <span class="s2">"/etc/kubernetes/manifests"</span><span class="nb">.</span> This can take up to 4m0s
<span class="o">[</span>apiclient] All control plane components are healthy after 15.502568 seconds
<span class="o">[</span>upload-config] Storing the configuration used <span class="k">in </span>ConfigMap <span class="s2">"kubeadm-config"</span> <span class="k">in </span>the <span class="s2">"kube-system"</span> Namespace
<span class="o">[</span>kubelet] Creating a ConfigMap <span class="s2">"kubelet-config-1.15"</span> <span class="k">in </span>namespace kube-system with the configuration <span class="k">for </span>the kubelets <span class="k">in </span>the cluster
<span class="o">[</span>upload-certs] Skipping phase. Please see <span class="nt">--upload-certs</span>
<span class="o">[</span>mark-control-plane] Marking the node kube01-717648 as control-plane by adding the label <span class="s2">"node-role.kubernetes.io/master=''"</span>
<span class="o">[</span>mark-control-plane] Marking the node kube01-717648 as control-plane by adding the taints <span class="o">[</span>node-role.kubernetes.io/master:NoSchedule]
<span class="o">[</span>bootstrap-token] Using token: b23rzg.5bcvi78bb63rbi08
<span class="o">[</span>bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="k">in </span>order <span class="k">for </span>nodes to get long term certificate credentials
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
<span class="o">[</span>bootstrap-token] configured RBAC rules to allow certificate rotation <span class="k">for </span>all node client certificates <span class="k">in </span>the cluster
<span class="o">[</span>bootstrap-token] Creating the <span class="s2">"cluster-info"</span> ConfigMap <span class="k">in </span>the <span class="s2">"kube-public"</span> namespace
<span class="o">[</span>addons] Applied essential addon: CoreDNS
<span class="o">[</span>addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/.kube
  <span class="nb">sudo cp</span> <span class="nt">-i</span> /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
  <span class="nb">sudo chown</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span><span class="si">)</span> <span class="nv">$HOME</span>/.kube/config

You should now deploy a pod network to the cluster.
Run <span class="s2">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can <span class="nb">join </span>any number of worker nodes by running the following on each as root:

kubeadm <span class="nb">join </span>10.0.0.39:6443 <span class="nt">--token</span> b23rzg.5bcvi78bb63rbi08 <span class="se">\</span>
    <span class="nt">--discovery-token-ca-cert-hash</span> sha256:7bd305eb247de3ee2221f43ab53ab4b79bb5ce6614e0516f07b63f565f96d372
</code></pre></div></div>

<p>Kubernetes 클러스터에 로컬로 액세스 할 수 있도록, 사용할 OS 유저에 설정을 추가합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/.kube
<span class="nb">sudo cp</span> <span class="nt">-i</span> /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
<span class="nb">sudo chown</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-u</span><span class="si">)</span>:<span class="si">$(</span><span class="nb">id</span> <span class="nt">-g</span><span class="si">)</span> <span class="nv">$HOME</span>/.kube/config
</code></pre></div></div>

<p>Pod에 네트워크 설정을 적용합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl apply <span class="nt">-f</span> https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml
</code></pre></div></div>

<p>마스터 노드 설정 끄-읕!</p>

<h1 id="워커-노드-설정">워커 노드 설정</h1>

<p>워커 노드를 설정하기 위해서 마스터 노드 설정 후에 <code class="language-plaintext highlighter-rouge">kubeadm join</code> 명령어를 그대로 복붙 해줍니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubeadm <span class="nb">join </span>10.0.0.39:6443 <span class="nt">--token</span> b23rzg.5bcvi78bb63rbi08 <span class="se">\</span>
    <span class="nt">--discovery-token-ca-cert-hash</span> sha256:7bd305eb247de3ee2221f43ab53ab4b79bb5ce6614e0516f07b63f565f96d372
</code></pre></div></div>

<p>아래와 같은 결과가 출력되면 마스터 노드에 붙습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>preflight] Running pre-flight checks
<span class="o">[</span>preflight] Reading configuration from the cluster...
<span class="o">[</span>preflight] FYI: You can look at this config file with <span class="s1">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span>
<span class="o">[</span>kubelet-start] Downloading configuration <span class="k">for </span>the kubelet from the <span class="s2">"kubelet-config-1.15"</span> ConfigMap <span class="k">in </span>the kube-system namespace
<span class="o">[</span>kubelet-start] Writing kubelet configuration to file <span class="s2">"/var/lib/kubelet/config.yaml"</span>
<span class="o">[</span>kubelet-start] Writing kubelet environment file with flags to file <span class="s2">"/var/lib/kubelet/kubeadm-flags.env"</span>
<span class="o">[</span>kubelet-start] Activating the kubelet service
<span class="o">[</span>kubelet-start] Waiting <span class="k">for </span>the kubelet to perform the TLS Bootstrap...

This node has joined the cluster:
<span class="k">*</span> Certificate signing request was sent to apiserver and a response was received.
<span class="k">*</span> The Kubelet was informed of the new secure connection details.

Run <span class="s1">'kubectl get nodes'</span> on the control-plane to see this node <span class="nb">join </span>the cluster.
</code></pre></div></div>

<p>확인해보기 위해서 아래 명령어를 마스터 노드에서 확인해 봅시다!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get nodes
</code></pre></div></div>

<p>아래 메시지처럼 나타났나요? 보이시나요?</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME            STATUS   ROLES    AGE     VERSION
kube01-717648   Ready    master   28m     v1.15.5
kube02          Ready    &lt;none&gt;   3m17s   v1.15.5
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl get pods <span class="nt">-A</span> <span class="nt">-o</span> wide
</code></pre></div></div>

<p>아까 Pod 구성한 것들이 클러스터에 골고루 분포가 되었나 확인해봅시다.</p>

<p>아래와 같이 출력이 되면 정상!</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE     IP           NODE            NOMINATED NODE   READINESS GATES
kube-system   coredns-5c98db65d4-rtx9z                1/1     Running   0          29m     10.244.0.3   kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   coredns-5c98db65d4-t5xsx                1/1     Running   0          29m     10.244.0.2   kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   etcd-kube01-717648                      1/1     Running   0          28m     10.0.0.39    kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   kube-apiserver-kube01-717648            1/1     Running   0          28m     10.0.0.39    kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   kube-controller-manager-kube01-717648   1/1     Running   0          28m     10.0.0.39    kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   kube-flannel-ds-amd64-cjrzc             1/1     Running   0          4m18s   10.0.0.40    kube02          &lt;none&gt;           &lt;none&gt;
kube-system   kube-flannel-ds-amd64-d5vf8             1/1     Running   0          4m49s   10.0.0.39    kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   kube-proxy-c9l9w                        1/1     Running   0          4m18s   10.0.0.40    kube02          &lt;none&gt;           &lt;none&gt;
kube-system   kube-proxy-x9wx8                        1/1     Running   0          29m     10.0.0.39    kube01-717648   &lt;none&gt;           &lt;none&gt;
kube-system   kube-scheduler-kube01-717648            1/1     Running   0          28m     10.0.0.39    kube01-717648   &lt;none&gt;           &lt;none&gt;
</code></pre></div></div>

<p>설정 끄-읕!</p>
:ET